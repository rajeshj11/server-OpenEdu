generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  username         String             @unique
  photo            String
  name             String
  bio              String
  email            String             @unique
  password         String
  emailVerified    Boolean            @default(false)
  role             String             @default("USER")
  settings         UserSettings       @relation(fields: [userSettingsId], references: [id])
  token            String             @default("demo")
  interests        String[]
  achievements     Achievement[]
  userSettingsId   Int
  CourseEnrollment CourseEnrollment[]
}

model UserSettings {
  id              Int     @id @default(autoincrement())
  userId          Int
  publicProfile   Boolean @default(true)
  publicEmail     Boolean @default(true)
  publicBio       Boolean @default(true)
  publicPhoto     Boolean @default(true)
  publicName      Boolean @default(true)
  publicInterests Boolean @default(true)
  User            User[]
}

enum UserCourseStatus {
  IN_PROGRESS
  COMPLETED
  NOT_STARTED
}

model Course {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  image            String
  subtopics        Subtopic[]
  userId           Int?
  Achievement      Achievement[]
  tags             String[]
  CourseEnrollment CourseEnrollment[]
}

model Subtopic {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  courseId    Int      @map("courseId")
  image       String
  course      Course   @relation(fields: [courseId], references: [id])
  modules     Module[]
}

model Module {
  id         Int      @id @default(autoincrement())
  name       String
  type       String
  content    String[]
  quiz       Quiz[]
  video      String?
  image      String
  subtopicId Int      @map("subtopicId")
  subtopic   Subtopic @relation(fields: [subtopicId], references: [id])
}

model Quiz {
  id       Int      @id @default(autoincrement())
  Question String
  Answer   String[]
  Options  String[]
  image    String?
  Module   Module?  @relation(fields: [moduleId], references: [id])
  moduleId Int?
}

model Achievement {
  id          Int    @id @default(autoincrement())
  name        String
  icon        String
  description String
  courseId    Int
  userId      Int
  course      Course @relation(fields: [courseId], references: [id])
  user        User   @relation(fields: [userId], references: [id])
}

model CourseEnrollment {
  id          Int              @id @default(autoincrement())
  userId      Int
  courseId    Int
  status      UserCourseStatus
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?
  course      Course           @relation(fields: [courseId], references: [id])
  User        User             @relation(fields: [userId], references: [id])
}
